/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.pojo.delta;

import org.apache.avro.generic.GenericArray;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@org.apache.avro.specific.AvroGenerated
public class Planet extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -7560299745087069210L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"Planet\",\"namespace\":\"com.pojo.delta\",\"fields\":[{\"name\":\"details\",\"type\":[\"null\",{\"type\":\"record\",\"name\":\"Details\",\"namespace\":\"com.pojo.delta.common\",\"fields\":[]}]},{\"name\":\"distanceFromSun\",\"type\":[\"null\",{\"type\":\"long\",\"java-class\":\"java.lang.Long\"}]},{\"name\":\"numberOfMoons\",\"type\":[\"null\",{\"type\":\"int\",\"java-class\":\"java.lang.Integer\"}]},{\"name\":\"planetName\",\"type\":[\"null\",\"string\"]},{\"name\":\"planetSize\",\"type\":[\"null\",\"string\"]}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<Planet> ENCODER =
      new BinaryMessageEncoder<Planet>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<Planet> DECODER =
      new BinaryMessageDecoder<Planet>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<Planet> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<Planet> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<Planet> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<Planet>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this Planet to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a Planet from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a Planet instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static Planet fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

   private com.pojo.delta.common.Details details;
   private java.lang.Long distanceFromSun;
   private java.lang.Integer numberOfMoons;
   private java.lang.CharSequence planetName;
   private java.lang.CharSequence planetSize;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public Planet() {}

  /**
   * All-args constructor.
   * @param details The new value for details
   * @param distanceFromSun The new value for distanceFromSun
   * @param numberOfMoons The new value for numberOfMoons
   * @param planetName The new value for planetName
   * @param planetSize The new value for planetSize
   */
  public Planet(com.pojo.delta.common.Details details, java.lang.Long distanceFromSun, java.lang.Integer numberOfMoons, java.lang.CharSequence planetName, java.lang.CharSequence planetSize) {
    this.details = details;
    this.distanceFromSun = distanceFromSun;
    this.numberOfMoons = numberOfMoons;
    this.planetName = planetName;
    this.planetSize = planetSize;
  }

  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return details;
    case 1: return distanceFromSun;
    case 2: return numberOfMoons;
    case 3: return planetName;
    case 4: return planetSize;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: details = (com.pojo.delta.common.Details)value$; break;
    case 1: distanceFromSun = (java.lang.Long)value$; break;
    case 2: numberOfMoons = (java.lang.Integer)value$; break;
    case 3: planetName = (java.lang.CharSequence)value$; break;
    case 4: planetSize = (java.lang.CharSequence)value$; break;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'details' field.
   * @return The value of the 'details' field.
   */
  public com.pojo.delta.common.Details getDetails() {
    return details;
  }


  /**
   * Sets the value of the 'details' field.
   * @param value the value to set.
   */
  public void setDetails(com.pojo.delta.common.Details value) {
    this.details = value;
  }

  /**
   * Gets the value of the 'distanceFromSun' field.
   * @return The value of the 'distanceFromSun' field.
   */
  public java.lang.Long getDistanceFromSun() {
    return distanceFromSun;
  }


  /**
   * Sets the value of the 'distanceFromSun' field.
   * @param value the value to set.
   */
  public void setDistanceFromSun(java.lang.Long value) {
    this.distanceFromSun = value;
  }

  /**
   * Gets the value of the 'numberOfMoons' field.
   * @return The value of the 'numberOfMoons' field.
   */
  public java.lang.Integer getNumberOfMoons() {
    return numberOfMoons;
  }


  /**
   * Sets the value of the 'numberOfMoons' field.
   * @param value the value to set.
   */
  public void setNumberOfMoons(java.lang.Integer value) {
    this.numberOfMoons = value;
  }

  /**
   * Gets the value of the 'planetName' field.
   * @return The value of the 'planetName' field.
   */
  public java.lang.CharSequence getPlanetName() {
    return planetName;
  }


  /**
   * Sets the value of the 'planetName' field.
   * @param value the value to set.
   */
  public void setPlanetName(java.lang.CharSequence value) {
    this.planetName = value;
  }

  /**
   * Gets the value of the 'planetSize' field.
   * @return The value of the 'planetSize' field.
   */
  public java.lang.CharSequence getPlanetSize() {
    return planetSize;
  }


  /**
   * Sets the value of the 'planetSize' field.
   * @param value the value to set.
   */
  public void setPlanetSize(java.lang.CharSequence value) {
    this.planetSize = value;
  }

  /**
   * Creates a new Planet RecordBuilder.
   * @return A new Planet RecordBuilder
   */
  public static com.pojo.delta.Planet.Builder newBuilder() {
    return new com.pojo.delta.Planet.Builder();
  }

  /**
   * Creates a new Planet RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new Planet RecordBuilder
   */
  public static com.pojo.delta.Planet.Builder newBuilder(com.pojo.delta.Planet.Builder other) {
    if (other == null) {
      return new com.pojo.delta.Planet.Builder();
    } else {
      return new com.pojo.delta.Planet.Builder(other);
    }
  }

  /**
   * Creates a new Planet RecordBuilder by copying an existing Planet instance.
   * @param other The existing instance to copy.
   * @return A new Planet RecordBuilder
   */
  public static com.pojo.delta.Planet.Builder newBuilder(com.pojo.delta.Planet other) {
    if (other == null) {
      return new com.pojo.delta.Planet.Builder();
    } else {
      return new com.pojo.delta.Planet.Builder(other);
    }
  }

  /**
   * RecordBuilder for Planet instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<Planet>
    implements org.apache.avro.data.RecordBuilder<Planet> {

    private com.pojo.delta.common.Details details;
    private com.pojo.delta.common.Details.Builder detailsBuilder;
    private java.lang.Long distanceFromSun;
    private java.lang.Integer numberOfMoons;
    private java.lang.CharSequence planetName;
    private java.lang.CharSequence planetSize;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.pojo.delta.Planet.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.details)) {
        this.details = data().deepCopy(fields()[0].schema(), other.details);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (other.hasDetailsBuilder()) {
        this.detailsBuilder = com.pojo.delta.common.Details.newBuilder(other.getDetailsBuilder());
      }
      if (isValidValue(fields()[1], other.distanceFromSun)) {
        this.distanceFromSun = data().deepCopy(fields()[1].schema(), other.distanceFromSun);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.numberOfMoons)) {
        this.numberOfMoons = data().deepCopy(fields()[2].schema(), other.numberOfMoons);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
      if (isValidValue(fields()[3], other.planetName)) {
        this.planetName = data().deepCopy(fields()[3].schema(), other.planetName);
        fieldSetFlags()[3] = other.fieldSetFlags()[3];
      }
      if (isValidValue(fields()[4], other.planetSize)) {
        this.planetSize = data().deepCopy(fields()[4].schema(), other.planetSize);
        fieldSetFlags()[4] = other.fieldSetFlags()[4];
      }
    }

    /**
     * Creates a Builder by copying an existing Planet instance
     * @param other The existing instance to copy.
     */
    private Builder(com.pojo.delta.Planet other) {
      super(SCHEMA$);
      if (isValidValue(fields()[0], other.details)) {
        this.details = data().deepCopy(fields()[0].schema(), other.details);
        fieldSetFlags()[0] = true;
      }
      this.detailsBuilder = null;
      if (isValidValue(fields()[1], other.distanceFromSun)) {
        this.distanceFromSun = data().deepCopy(fields()[1].schema(), other.distanceFromSun);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.numberOfMoons)) {
        this.numberOfMoons = data().deepCopy(fields()[2].schema(), other.numberOfMoons);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.planetName)) {
        this.planetName = data().deepCopy(fields()[3].schema(), other.planetName);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.planetSize)) {
        this.planetSize = data().deepCopy(fields()[4].schema(), other.planetSize);
        fieldSetFlags()[4] = true;
      }
    }

    /**
      * Gets the value of the 'details' field.
      * @return The value.
      */
    public com.pojo.delta.common.Details getDetails() {
      return details;
    }


    /**
      * Sets the value of the 'details' field.
      * @param value The value of 'details'.
      * @return This builder.
      */
    public com.pojo.delta.Planet.Builder setDetails(com.pojo.delta.common.Details value) {
      validate(fields()[0], value);
      this.detailsBuilder = null;
      this.details = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'details' field has been set.
      * @return True if the 'details' field has been set, false otherwise.
      */
    public boolean hasDetails() {
      return fieldSetFlags()[0];
    }

    /**
     * Gets the Builder instance for the 'details' field and creates one if it doesn't exist yet.
     * @return This builder.
     */
    public com.pojo.delta.common.Details.Builder getDetailsBuilder() {
      if (detailsBuilder == null) {
        if (hasDetails()) {
          setDetailsBuilder(com.pojo.delta.common.Details.newBuilder(details));
        } else {
          setDetailsBuilder(com.pojo.delta.common.Details.newBuilder());
        }
      }
      return detailsBuilder;
    }

    /**
     * Sets the Builder instance for the 'details' field
     * @param value The builder instance that must be set.
     * @return This builder.
     */
    public com.pojo.delta.Planet.Builder setDetailsBuilder(com.pojo.delta.common.Details.Builder value) {
      clearDetails();
      detailsBuilder = value;
      return this;
    }

    /**
     * Checks whether the 'details' field has an active Builder instance
     * @return True if the 'details' field has an active Builder instance
     */
    public boolean hasDetailsBuilder() {
      return detailsBuilder != null;
    }

    /**
      * Clears the value of the 'details' field.
      * @return This builder.
      */
    public com.pojo.delta.Planet.Builder clearDetails() {
      details = null;
      detailsBuilder = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'distanceFromSun' field.
      * @return The value.
      */
    public java.lang.Long getDistanceFromSun() {
      return distanceFromSun;
    }


    /**
      * Sets the value of the 'distanceFromSun' field.
      * @param value The value of 'distanceFromSun'.
      * @return This builder.
      */
    public com.pojo.delta.Planet.Builder setDistanceFromSun(java.lang.Long value) {
      validate(fields()[1], value);
      this.distanceFromSun = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'distanceFromSun' field has been set.
      * @return True if the 'distanceFromSun' field has been set, false otherwise.
      */
    public boolean hasDistanceFromSun() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'distanceFromSun' field.
      * @return This builder.
      */
    public com.pojo.delta.Planet.Builder clearDistanceFromSun() {
      distanceFromSun = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'numberOfMoons' field.
      * @return The value.
      */
    public java.lang.Integer getNumberOfMoons() {
      return numberOfMoons;
    }


    /**
      * Sets the value of the 'numberOfMoons' field.
      * @param value The value of 'numberOfMoons'.
      * @return This builder.
      */
    public com.pojo.delta.Planet.Builder setNumberOfMoons(java.lang.Integer value) {
      validate(fields()[2], value);
      this.numberOfMoons = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'numberOfMoons' field has been set.
      * @return True if the 'numberOfMoons' field has been set, false otherwise.
      */
    public boolean hasNumberOfMoons() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'numberOfMoons' field.
      * @return This builder.
      */
    public com.pojo.delta.Planet.Builder clearNumberOfMoons() {
      numberOfMoons = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'planetName' field.
      * @return The value.
      */
    public java.lang.CharSequence getPlanetName() {
      return planetName;
    }


    /**
      * Sets the value of the 'planetName' field.
      * @param value The value of 'planetName'.
      * @return This builder.
      */
    public com.pojo.delta.Planet.Builder setPlanetName(java.lang.CharSequence value) {
      validate(fields()[3], value);
      this.planetName = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'planetName' field has been set.
      * @return True if the 'planetName' field has been set, false otherwise.
      */
    public boolean hasPlanetName() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'planetName' field.
      * @return This builder.
      */
    public com.pojo.delta.Planet.Builder clearPlanetName() {
      planetName = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'planetSize' field.
      * @return The value.
      */
    public java.lang.CharSequence getPlanetSize() {
      return planetSize;
    }


    /**
      * Sets the value of the 'planetSize' field.
      * @param value The value of 'planetSize'.
      * @return This builder.
      */
    public com.pojo.delta.Planet.Builder setPlanetSize(java.lang.CharSequence value) {
      validate(fields()[4], value);
      this.planetSize = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'planetSize' field has been set.
      * @return True if the 'planetSize' field has been set, false otherwise.
      */
    public boolean hasPlanetSize() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'planetSize' field.
      * @return This builder.
      */
    public com.pojo.delta.Planet.Builder clearPlanetSize() {
      planetSize = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public Planet build() {
      try {
        Planet record = new Planet();
        if (detailsBuilder != null) {
          try {
            record.details = this.detailsBuilder.build();
          } catch (org.apache.avro.AvroMissingFieldException e) {
            e.addParentField(record.getSchema().getField("details"));
            throw e;
          }
        } else {
          record.details = fieldSetFlags()[0] ? this.details : (com.pojo.delta.common.Details) defaultValue(fields()[0]);
        }
        record.distanceFromSun = fieldSetFlags()[1] ? this.distanceFromSun : (java.lang.Long) defaultValue(fields()[1]);
        record.numberOfMoons = fieldSetFlags()[2] ? this.numberOfMoons : (java.lang.Integer) defaultValue(fields()[2]);
        record.planetName = fieldSetFlags()[3] ? this.planetName : (java.lang.CharSequence) defaultValue(fields()[3]);
        record.planetSize = fieldSetFlags()[4] ? this.planetSize : (java.lang.CharSequence) defaultValue(fields()[4]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<Planet>
    WRITER$ = (org.apache.avro.io.DatumWriter<Planet>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<Planet>
    READER$ = (org.apache.avro.io.DatumReader<Planet>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

  @Override protected boolean hasCustomCoders() { return true; }

  @Override public void customEncode(org.apache.avro.io.Encoder out)
    throws java.io.IOException
  {
    if (this.details == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      this.details.customEncode(out);
    }

    if (this.distanceFromSun == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeLong(this.distanceFromSun);
    }

    if (this.numberOfMoons == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeInt(this.numberOfMoons);
    }

    if (this.planetName == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeString(this.planetName);
    }

    if (this.planetSize == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeString(this.planetSize);
    }

  }

  @Override public void customDecode(org.apache.avro.io.ResolvingDecoder in)
    throws java.io.IOException
  {
    org.apache.avro.Schema.Field[] fieldOrder = in.readFieldOrderIfDiff();
    if (fieldOrder == null) {
      if (in.readIndex() != 1) {
        in.readNull();
        this.details = null;
      } else {
        if (this.details == null) {
          this.details = new com.pojo.delta.common.Details();
        }
        this.details.customDecode(in);
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.distanceFromSun = null;
      } else {
        this.distanceFromSun = in.readLong();
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.numberOfMoons = null;
      } else {
        this.numberOfMoons = in.readInt();
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.planetName = null;
      } else {
        this.planetName = in.readString(this.planetName instanceof Utf8 ? (Utf8)this.planetName : null);
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.planetSize = null;
      } else {
        this.planetSize = in.readString(this.planetSize instanceof Utf8 ? (Utf8)this.planetSize : null);
      }

    } else {
      for (int i = 0; i < 5; i++) {
        switch (fieldOrder[i].pos()) {
        case 0:
          if (in.readIndex() != 1) {
            in.readNull();
            this.details = null;
          } else {
            if (this.details == null) {
              this.details = new com.pojo.delta.common.Details();
            }
            this.details.customDecode(in);
          }
          break;

        case 1:
          if (in.readIndex() != 1) {
            in.readNull();
            this.distanceFromSun = null;
          } else {
            this.distanceFromSun = in.readLong();
          }
          break;

        case 2:
          if (in.readIndex() != 1) {
            in.readNull();
            this.numberOfMoons = null;
          } else {
            this.numberOfMoons = in.readInt();
          }
          break;

        case 3:
          if (in.readIndex() != 1) {
            in.readNull();
            this.planetName = null;
          } else {
            this.planetName = in.readString(this.planetName instanceof Utf8 ? (Utf8)this.planetName : null);
          }
          break;

        case 4:
          if (in.readIndex() != 1) {
            in.readNull();
            this.planetSize = null;
          } else {
            this.planetSize = in.readString(this.planetSize instanceof Utf8 ? (Utf8)this.planetSize : null);
          }
          break;

        default:
          throw new java.io.IOException("Corrupt ResolvingDecoder.");
        }
      }
    }
  }
}










